#ifndef WRAPPER_POLPAK_H_INCLUDED
#define WRAPPER_POLPAK_H_INCLUDED

#define fibonacci_floor(a,b,c) FUNCNAME_FIBONACCIFLOOR(C_DT2PI(a,b,c))
#define legendre_associated_normalized(a,b,c,d) FUNCNAME_LEGENDREASSOCIATEDNORMALIZED(C_2DTPITIT(a,b,d,c))
#define i4_is_triangular(a) R_UCHR(FUNCNAME_I4ISTRIANGULAR(C_SUSHRT(a)))
#define cheby_t_poly(a,b,c) FUNCNAME_CHEBYTPOLY(C_2DTPIT(a,b,c))
#define agud(a) R_DBL(FUNCNAME_AGUD(C_SDBL(a)))
#define align_enum(a,b) R_USHRT(FUNCNAME_ALIGNENUM(C_PINT2(a,b)))
#define benford(a) R_DBL(FUNCNAME_BENFORD(C_SINT(a)))
#define bernoulli_number(a,b) FUNCNAME_BERNOULLINUMBER(C_DTPIT(a,b))
#define bernoulli_number2(a,b) FUNCNAME_BERNOULLINUMBER2(C_DTPIT(a,b))
#define bernoulli_number3(a) R_DBL(FUNCNAME_BERNOULLINUMBER3(C_SUSHRT(a)))
#define bernoulli_poly(a,b) R_DBL(FUNCNAME_BERNOULLIPOLY(C_DTIT(a,b)))
#define bernoulli_poly2(a,b) R_DBL(FUNCNAME_BERNOULLIPOLY2(C_DTIT(a,b)))
#define cardan_poly(a,b,c) FUNCNAME_CARDANPOLY(C_2ITDT(b,c,a))
#define cardan_poly_coef(a,b,c) FUNCNAME_CARDANPOLYCOEF(C_DTPITIT(a,c,b))
#define cardinal_cos(a,b,c,d) FUNCNAME_CARDINALCOS(C_3DTPIT(a,b,c,d))
#define cardinal_sin(a,b,c,d) FUNCNAME_CARDINALSIN(C_3DTPIT(a,b,c,d))
#define catalan(a,b) FUNCNAME_CATALAN(C_DTPI(a,b))
#define catalan_row_next(a,b,c) FUNCNAME_CATALANROWNEXT(C_BDTPI(a,b,c))
#define charlier(a,b,c,d) FUNCNAME_CHARLIER(C_DT2ITPIT(a,b,c,d))
#define chebyshev_discrete(a,b,c,d) FUNCNAME_CHEBYSHEVDISCRETE(C_2DTPITIT(a,b,d,c))
#define collatz_count(a) R_USHRT(FUNCNAME_COLLATZCOUNT(C_SUSHRT(a)))
#define collatz_count_max(a,b,c) FUNCNAME_COLLATZCOUNTMAX(C_DT2PI(a,b,c))
#define comb_row_next(a,b) FUNCNAME_COMBROWNEXT(C_DTPI(a,b))
#define commul(a,b,c) R_INT(FUNCNAME_COMMUL(C_DTPII(b,c,a)))
#define complete_symmetric_poly(a,b,c) R_DBL(FUNCNAME_COMPLETESYMMETRICPOLY(C_2DTPIT(a,b,c)))
#define cos_power_int(a,b,c) R_DBL(FUNCNAME_COSPOWERINT(C_2ITDT(a,b,c)))
#define euler_number(a,b) FUNCNAME_EULERNUMBER(C_DTPI(a,b))
#define euler_number2(a,b) R_DBL(FUNCNAME_EULERNUMBER2(C_SUSHRT(a,b)))
#define euler_poly(a,b) R_DBL(FUNCNAME_EULERPOLY(C_DTIT(a,b)))
#define eulerian(a,b) FUNCNAME_EULERIAN(C_DTPI(a,b))
#define f_hofstadter(a) R_USHRT(FUNCNAME_FHOFSTADTER(C_SUSHRT(a)))
#define g_hofstadter(a) R_USHRT(FUNCNAME_GHOFSTADTER(C_SUSHRT(a)))
#define gegenbauer_poly(a,b,c,d) FUNCNAME_GEGENBAUERPOLY(C_DT2ITPIT(a,b,c,d))
#define gud(a) R_DBL(FUNCNAME_GUD(C_SDBL(a)))
#define h_hofstadter(a) R_USHRT(FUNCNAME_HHOFSTADTER(C_SUSHRT(a)))
#define hail(a) R_USHRT(FUNCNAME_HAIL(C_SUSHRT(a)))
#define i4_partition_distinct_count(a) R_INT(FUNCNAME_I4PARTITIONDISTINCTCOUNT(C_SUSHRT(a)))
#define krawtchouk(a,b,c,d,e) FUNCNAME_KRAWTCHOUK(C_DT2ITDTPIT(a,b,c,d,e))
#define lerch(a,b,c) FUNCNAME_LERCH(C_2ITDT(a,c,b))
#define meixner(a,b,c,d,e) FUNCNAME_MEIXNER(C_DT3ITPIT(a,b,c,d,e))
#define mertens(a) R_SHRT(FUNCNAME_MERTENS(C_SUSHRT(a)))
#define moebius(a) R_SHRT(FUNCNAME_MOEBIUS(C_SUSHRT(a)))
#define motzkin(a,b) FUNCNAME_MOTZKIN(C_DTPI(a,b))
#define omega(a) R_USHRT(FUNCNAME_OMEGA(C_SUSHRT(a)))
#define pentagon_num(a) R_USHRT(FUNCNAME_PENTAGONNUM(C_SUSHRT(a)))
#define phi(a) R_USHRT(FUNCNAME_PHI(C_SUSHRT(a)))
#define plane_partition_num(a) R_USHRT(FUNCNAME_PLANEPARTITIONNUM(C_SUSHRT(a)))
#define pyramid_num(a) R_USHRT(FUNCNAME_PYRAMIDNUM(C_SUSHRT(a)))
#define pyramid_square_num(a) R_USHRT(FUNCNAME_PYRAMIDSQUARENUM(C_SUSHRT(a)))
#define r8_agm(a,b) R_DBL(FUNCNAME_R8AGM(C_PDBL2(a,b)))
#define r8_factorial_log(a) R_DBL(FUNCNAME_R8FACTORIALLOG(C_SUSHRT(a)))
#define r8_hyper_2f1(a,b,c,d) R_DBL(FUNCNAME_R8HYPER2F1(C_PDBL4(a,b,c,d)))
#define r8_psi(a) R_DBL(FUNCNAME_R8PSI(C_SDBL(a)))
#define r8poly_value_horner(a,b,c) R_DBL(FUNCNAME_R8POLYVALUEHORNER(C_DTPITIT(a,b,c)))
#define sigma(a) R_DBL(FUNCNAME_SIGMA(C_SUSHRT(a)))
#define simplex_num(a,b) R_USHRT(FUNCNAME_SIMPLEXNUM(C_PUSHRT2(a,b)))
#define sin_power_int(a,b,c) R_DBL(FUNCNAME_SINPOWERINT(C_2ITDT(a,b,c)))
#define slice(a,b) R_USHRT(FUNCNAME_SLICE(C_PUSHRT2(a,b)))
#define spherical_harmonic(a,b,c,d,e,f) FUNCNAME_SPHERICALHARMONIC(C_DTS2IT2PIT(a,b,c,d,e,f))
#define tau(a) R_USHRT(FUNCNAME_TAU(C_SUSHRT(a)))
#define tetrahedron_num(a) R_USHRT(FUNCNAME_TETRAHEDRONNUM(C_SUSHRT(a)))
#define triangle_num(a) R_USHRT(FUNCNAME_TRIANGLENUM(C_SUSHRT(a)))
#define trinomial(a,b,c) R_INT(FUNCNAME_TRINOMIAL(C_PUSHRT3(a,b,c)))
#define v_hofstadter(a) R_USHRT(FUNCNAME_VHOFSTADTER(C_SUSHRT(a)))
#define vibonacci(a,b,c) FUNCNAME_VIBONACCI(C_DT2PI(a,b,c))
#define zeckendorf(a,b,c,d,e) FUNCNAME_ZECKENDORF(C_2DT3PI(a,b,c,d,e))
#define zernike_poly(a,b,c) R_DBL(FUNCNAME_ZERNIKEPOLY(C_2DTIT(a,b,c)))
#define zeta(a) R_DBL(FUNCNAME_ZETA(C_SDBL(a)))
#define i4_factor(a,b,c,d,e,f) FUNCNAME_I4FACTOR(C_2DT4PI(a,b,c,d,e,f))
#define fibonacci_direct(a) R_INT(FUNCNAME_FIBONACCIDIRECT(C_SINT(a)))

__MATHSUITE __JBURKARDT void * FUNCNAME_FIBONACCIFLOOR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_LEGENDREASSOCIATEDNORMALIZED(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_BERNOULLINUMBER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_BERNOULLINUMBER2(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_CARDANPOLYCOEF(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_CATALAN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_CATALANROWNEXT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_CHARLIER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_CHEBYSHEVDISCRETE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_COLLATZCOUNTMAX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_COMBROWNEXT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_COMMUL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_COMPLETESYMMETRICPOLY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_EULERNUMBER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_EULERIAN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_EULERPOLY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_GEGENBAUERPOLY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_KRAWTCHOUK(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_MEIXNER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_MOTZKIN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_R8POLYVALUEHORNER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_SPHERICALHARMONIC(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_VIBONACCI(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_ZECKENDORF(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4FACTOR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_CHEBYTPOLY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_CARDANPOLY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_CARDINALCOS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_CARDINALSIN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ISTRIANGULAR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_AGUD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_BENFORD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_BERNOULLINUMBER3(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_COLLATZCOUNT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_EULERNUMBER2(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_FHOFSTADTER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_GHOFSTADTER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_GUD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_HHOFSTADTER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_HAIL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4PARTITIONDISTINCTCOUNT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_MERTENS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_MOEBIUS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_OMEGA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PENTAGONNUM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PHI(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PLANEPARTITIONNUM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PYRAMIDNUM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PYRAMIDSQUARENUM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_R8FACTORIALLOG(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_R8PSI(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_SIGMA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TAU(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TETRAHEDRONNUM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TRIANGLENUM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_VHOFSTADTER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_ZETA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_FIBONACCIDIRECT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_ALIGNENUM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_BERNOULLIPOLY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_BERNOULLIPOLY2(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_COSPOWERINT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_LERCH(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TRINOMIAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_ZERNIKEPOLY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_SINPOWERINT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_R8HYPER2F1(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_R8AGM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_SIMPLEXNUM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_SLICE(void *);

#endif
