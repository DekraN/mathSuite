#ifndef WRAPPER_BERNSTEIN_POLYNOMIAL_H_INCLUDED
#define WRAPPER_BERNSTEIN_POLYNOMIAL_H_INCLUDED

#define bernstein_matrix(a,b) FUNCNAME_BERNSTEINMATRIX(C_DTPIT(a,b))
#define bernstein_matrix_inverse(a,b) FUNCNAME_BERNSTEINMATRIXINVERSE(C_DTPIT(a,b))
#define bernstein_poly_01(a,b,c) FUNCNAME_BERNSTEINPOLY01(C_DTPITIT(a,c,b))
#define bernstein_poly_ab(a,b,c,d,e) R_UCHR(FUNCNAME_BERNSTEINPOLYAB(C_DT3ITPIT(a,b,c,d,e)))
#define bernstein_poly_01_values(a,b,c,d,e) FUNCNAME_BERNSTEINPOLY01VALUES(C_3PDT2PIT(a,b,c,d,e))
#define r8_choose(a,b) R_DBL(FUNCNAME_R8CHOOSE(C_PUSHRT2(a,b)))
#define r8_sign(a) R_DBL(FUNCNAME_R8SIGN(C_SDBL(a)))
#define r8vec_linspace_new(a,b,c) FUNCNAME_R8VECLINSPACENEW(C_2ITDT(b,c,a))

__MATHSUITE __JBURKARDT void * FUNCNAME_R8SIGN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_R8VECLINSPACENEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_BERNSTEINMATRIX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_BERNSTEINMATRIXINVERSE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_BERNSTEINPOLYAB(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_R8CHOOSE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_BERNSTEINPOLY01VALUES(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_BERNSTEINPOLY01(void *);

#endif
