#ifndef WRAPPER_I4LIB_H_INCLUDED
#define WRAPPER_I4LIB_H_INCLUDED

#define i4_abs(a) R_INT(FUNCNAME_I4ABS(C_SINT(a)))
#define i4_mach(a) R_INT(FUNCNAME_I4MACH(C_SINT(a)))
#define i4_pow(a,b) R_INT(FUNCNAME_I4POW(C_PINT2(a,b)))
#define i4_bit_hi1(a) R_INT(FUNCNAME_I4BITHI1(C_SINT(a)))
#define i4_bit_lo0(a) R_INT(FUNCNAME_I4BITLO0(C_SINT(a)))
#define i4_bit_lo1(a) R_INT(FUNCNAME_I4BITLO1(C_SINT(a)))
#define i4_bit_reverse(a,b) R_INT(FUNCNAME_I4BITREVERSE(C_PINT2(a,b)))
#define i4_characteristic(a) R_INT(FUNCNAME_I4CHARACTERISTIC(C_SINT(a)))
#define i4_choose(a,b) R_INT(FUNCNAME_I4CHOOSE(C_PINT2(a,b)))
#define i4_div_rounded(a,b) R_INT(FUNCNAME_I4DIVROUNDED(C_PINT2(a,b)))
#define i4_division(a,b) R_INT(FUNCNAME_I4DIVISION(C_PINT2(a,b)))
#define i4_divp(a,b) R_INT(FUNCNAME_I4DIVP(C_PINT2(a,b)))
#define i4_fall(a,b) R_INT(FUNCNAME_I4FALL(C_PINT2(a,b)))
#define i4_floor(a) R_INT(FUNCNAME_I4FLOOR(C_SDBL(a)))
#define i4_fraction(a,b) R_INT(FUNCNAME_I4FRACTION(C_PINT2(a,b)))
#define i4_gcdb(a,b,c) R_INT(FUNCNAME_I4GCDB(C_PINT3(a,b,c)))
#define i4_huge_normalizer() R_DBL(FUNCNAME_I4HUGENORMALIZER(NULL))
#define i4_is_even(a) R_UCHR(FUNCNAME_I4ISEVEN(C_SINT(a)))
#define i4_is_odd(a) R_UCHR(FUNCNAME_I4ISODD(C_SINT(a)))
#define i4_is_power_of_2(a) R_UCHR(FUNCNAME_I4ISPOWEROF2(C_SINT(a)))
#define i4_is_prime(a) R_UCHR(FUNCNAME_I4ISPRIME(C_SINT(a)))
#define i4_lcm(a,b) R_INT(FUNCNAME_I4LCM(C_PINT2(a,b)))
#define i4_log_10(a) R_INT(FUNCNAME_I4LOG10(C_SINT(a)))
#define i4_log_2(a) R_INT(FUNCNAME_I4LOG2(C_SINT(a)))
#define i4_log_i4(a,b) R_INT(FUNCNAME_I4LOGI4(C_PINT2(a,b)))
#define i4_log_r8(a,b) R_INT(FUNCNAME_I4LOGR8(C_ITI(b,a)))
#define i4_mant(a,b,c,d,e) FUNCNAME_I4MANT(C_IT4PI(a,b,c,d,e))
#define i4_mod_inv(a,b) R_INT(FUNCNAME_I4MODINV(C_PINT2(a,b)))
#define i4_moddiv(a,b,c,d) FUNCNAME_I4MODDIV(C_2I2PI(a,b,c,d))
#define i4_reverse_bytes(a) R_INT(FUNCNAME_I4REVERSEBYTES(C_SINT(a)))
#define i4_rise(a,b) R_INT(FUNCNAME_I4RISE(C_PINT2(a,b)))
#define i4_sign3(a) R_CHR(FUNCNAME_I4SIGN3(C_SINT(a)))
#define i4_swap3(a,b,c) FUNCNAME_I4SWAP3(C_PINT3(a,b,c))
#define i4_to_angle(a) R_DBL(FUNCNAME_I4TOANGLE(C_SINT(a)))
#define i4_to_digits_binary(a,b) FUNCNAME_I4TODIGITSBINARY(C_PINT2(a,b))
#define i4_to_digits_decimal(a,b) FUNCNAME_I4TODIGITSDECIMAL(C_PINT2(a,b))
#define i4_to_fac(a,b) FUNCNAME_I4TOFAC(C_PINT2(a,b))
#define i4_to_halton(a,b,c,d,e,f) FUNCNAME_I4TOHALTON(C_2DTPI2PDTPIT(a,b,c,d,e,f))
#define i4_to_isbn(a) R_CHR(FUNCNAME_I4TOISBN(C_SINT(a)))
#define i4_to_l4(a) R_UCHR(FUNCNAME_I4TOL4(C_SINT(a)))
#define i4_to_pascal(a,b,c) FUNCNAME_I4TOPASCAL(C_I2PI(a,b,c))
#define i4_to_pascal_degree(a) R_UCHR(FUNCNAME_I4TOPASCALDEGREE(C_SINT(a)))
#define i4_to_triangle(a,b,c) FUNCNAME_I4TOTRIANGLE(C_I2PI(a,b,c))
#define i4_unswap3(a,b,c) FUNCNAME_I4UNSWAP3(C_PINT3(a,b,c))
#define i4_walsh_1d(a,b) R_INT(FUNCNAME_I4WALSH1D(C_ITI(a,b)))
#define i4_width(a) R_INT(FUNCNAME_I4WIDTH(C_SINT(a)))
#define i4_wrap(a,b,c) R_INT(FUNCNAME_I4WRAP(C_PINT3(a,b,c)))
#define i4_xor(a,b) R_UINT(FUNCNAME_I4XOR(C_PUINT2(a,b)))
#define i43mat_flip_cols(a,b,c) FUNCNAME_I43MATFLIPCOLS(C_2DTPDT(a,b,c))
#define i43mat_flip_rows(a,b,c) FUNCNAME_I43MATFLIPROWS(C_2DTPDT(a,b,c))
#define i4block_delete(a,b,c,d) FUNCNAME_I4BLOCKDELETE(C_PPPI3DT(a,b,c,d))
#define i4block_new(a,b,c) FUNCNAME_I4BLOCKNEW(C_PUSHRT3(a,b,c))
#define i4block_zeros_new(a,b,c) FUNCNAME_I4BLOCKZEROSNEW(C_PUSHRT3(a,b,c))
#define i4cmat_delete(a,b,c) FUNCNAME_I4CMATDELETE(C_PPI2DT(a,b,c))
#define i4cmat_new(a,b,c) FUNCNAME_I4CMATNEW(C_PUSHRT3(a,b,c))
#define i4col_compare(a,b,c,d,e) R_UINT(FUNCNAME_I4COLCOMPARE(C_2DTPI2DT(a,b,c,d,e)))
#define i4col_find(a,b,c,d) R_SHRT(FUNCNAME_I4COLFIND(C_2DT2PI(a,b,c,d)))
#define i4col_find_item(a,b,c,d,e,f) FUNCNAME_I4COLFINDITEM(C_2DTPII2PDT(a,b,c,d,e,f))
#define i4col_find_pair_wrap(a,b,c,d,e,f,g) FUNCNAME_I4COLFINDPAIRWRAP(C_2DTPI2I2PDT(a,b,c,d,e,f,g))
#define i4col_first_index(a,b,c) FUNCNAME_I4COLFIRSTINDEX(C_2DTPI(a,b,c))
#define i4col_sort_a(a,b,c) FUNCNAME_I4COLSORTA(C_2DTPI(a,b,c))
#define i4col_sort_d(a,b,c) FUNCNAME_I4COLSORTD(C_2DTPI(a,b,c))
#define i4col_sort2_a(a,b,c) FUNCNAME_I4COLSORT2A(C_2DTPI(a,b,c))
#define i4col_sort2_d(a,b,c) FUNCNAME_I4COLSORT2D(C_2DTPI(a,b,c))
#define i4col_sorted_singleton_count(a,b,c) R_INT(FUNCNAME_I4COLSORTEDSINGLETONCOUNT(C_2DTPI(a,b,c)))
#define i4col_sorted_unique(a,b,c,d) FUNCNAME_I4COLSORTEDUNIQUE(C_2DTPIPS(a,b,c,d))
#define i4col_sorted_unique_count(a,b,c) R_INT(FUNCNAME_I4COLSORTEDUNIQUECOUNT(C_2DTPI(a,b,c)))
#define i4col_swap(a,b,c,d,e) FUNCNAME_I4COLSWAP(C_2DTPI2DT(a,b,c,d,e))
#define i4col_unique_index(a,b,c) FUNCNAME_I4COLUNIQUEINDEX(C_2DTPI(a,b,c))
#define i4i4_sort_a(a,b,c,d) FUNCNAME_I4I4SORTA(C_DTI2PDT(a,b,c,d))
#define i4i4i4_sort_a(a,b,c,d,e,f) FUNCNAME_I4I4I4SORTA(C_3I3PDT(a,b,c,d,e,f))
#define i4int_to_r4int(a,b,c,d,e) R_FLT(FUNCNAME_I4INTTOR4INT(C_3I2F(a,b,c,d,e)))
#define i4int_to_r8int(a,b,c,d,e) R_DBL(FUNCNAME_I4INTTOR8INT(C_3I2IT(a,b,c,d,e)))
#define i4mat_border_add(a,b,c) FUNCNAME_I4MATBORDERADD(C_2DTPI(a,b,c))
#define i4mat_border_cut(a,b,c) FUNCNAME_I4MATBORDERCUT(C_2DTPI(a,b,c))
#define i4mat_copy(a,b,c,d) FUNCNAME_I4MATCOPY(C_2DT2PI(a,b,c,d))
#define i4mat_copy_new(a,b,c) FUNCNAME_I4MATCOPYNEW(C_2DTPI(a,b,c))
#define i4mat_elim(a,b,c) FUNCNAME_I4MATELIM(C_2DTPI(a,b,c))
#define i4mat_flip_cols(a,b,c) FUNCNAME_I4MATFLIPCOLS(C_2DTPI(a,b,c))
#define i4mat_flip_rows(a,b,c) FUNCNAME_I4MATFLIPROWS(C_2DTPI(a,b,c))
#define i4mat_histogram(a,b,c,d) FUNCNAME_I4MATHISTOGRAM(C_3DTPI(a,b,d,c))
#define i4mat_indicator_new(a,b) FUNCNAME_I4MATINDICATORNEW(C_PUSHRT2(a,b))
#define i4mat_l1_inverse(a,b) FUNCNAME_I4MATL1INVERSE(C_DTPI(a,b))
#define i4mat_max(a,b,c) R_INT(FUNCNAME_I4MATMAX(C_2DTPI(a,b,c)))
#define i4mat_max_index(a,b,c,d,e) FUNCNAME_I4MATMAXINDEX(C_2DTPI2PDT(a,b,c,d,e))
#define i4mat_min(a,b,c) R_INT(FUNCNAME_I4MATMIN(C_2DTPI(a,b,c)))
#define i4mat_min_index(a,b,c,d,e) FUNCNAME_I4MATMININDEX(C_2DTPI2PDT(a,b,c,d,e))
#define i4mat_mm(a,b,c,d,e) FUNCNAME_I4MATMM(C_3DT2PI(a,b,c,d,e))
#define i4mat_perm_uniform(a,b,c) FUNCNAME_I4MATPERMUNIFORM(C_DT2PI(a,b,c))
#define i4mat_perm2_uniform(a,b,c,d) FUNCNAME_I4MATPERM2UNIFORM(C_2DT2PI(a,b,c,d))
#define i4mat_red(a,b,c,d,e) FUNCNAME_I4MATRED(C_2DTPI2PDT(a,b,c,d,e))
#define i4mat_u1_inverse(a,b) FUNCNAME_I4MATU1INVERSE(C_DTPI(a,b))
#define i4mat_uniform_ab(a,b,c,d,e,f) FUNCNAME_I4MATUNIFORMAB(C_2DT2I2PI(a,b,c,d,e,f))
#define i4mat_uniform_ab_new(a,b,c,d,e) FUNCNAME_I4MATUNIFORMABNEW(C_2DT2IPI(a,b,c,d,e))
#define i4rmat_delete(a,b,c) FUNCNAME_I4RMATDELETE(C_PPI2DT(a,b,c))
#define i4rmat_new(a,b) FUNCNAME_I4RMATNEW(C_PUSHRT2(a,b))
#define i4row_compare(a,b,c,d,e) R_USHRT(FUNCNAME_I4ROWCOMPARE(C_2DTPI2DT(a,b,c,d,e)))
#define i4row_find_item(a,b,c,d,e,f) FUNCNAME_I4ROWFINDITEM(C_2DTPII2PDT(a,b,c,d,e,f))
#define i4row_max(a,b,c) FUNCNAME_I4ROWMAX(C_2DTPI(a,b,c))
#define i4row_mean(a,b,c) FUNCNAME_I4ROWMEAN(C_2DTPI(a,b,c))
#define i4row_min(a,b,c) FUNCNAME_I4ROWMIN(C_2DTPI(a,b,c))
#define i4row_sort_a(a,b,c) FUNCNAME_I4ROWSORTA(C_2DTPI(a,b,c))
#define i4row_sort_d(a,b,c) FUNCNAME_I4ROWSORTD(C_2DTPI(a,b,c))
#define i4row_sort2_d(a,b,c) FUNCNAME_I4ROWSORT2D(C_2DTPI(a,b,c))
#define i4row_sum(a,b,c) FUNCNAME_I4ROWSUM(C_2DTPI(a,b,c))
#define i4row_swap(a,b,c,d,e) FUNCNAME_I4ROWSWAP(C_2DTPI2DT(a,b,c,d,e))
#define i4row_variance(a,b,c) FUNCNAME_I4ROWVARIANCE(C_2DTPI(a,b,c))
#define i4vec_add(a,b,c,d) FUNCNAME_I4VECADD(C_DT3PI(a,b,c,d))
#define i4vec_add_new(a,b,c) FUNCNAME_I4VECADDNEW(C_DTPIPDT(a,c,b))
#define i4vec_all_nonpositive(a,b) R_UCHR(FUNCNAME_I4VECALLNONPOSITIVE(C_DTPI(a,b)))
#define i4vec_amax(a,b) R_INT(FUNCNAME_I4VECAMAX(C_DTPI(a,b)))
#define i4vec_amax_index(a,b) R_SHRT(FUNCNAME_I4VECAMAXINDEX(C_DTPI(a,b)))
#define i4vec_amin(a,b) R_INT(FUNCNAME_I4VECAMIN(C_DTPI(a,b)))
#define i4vec_amin_index(a,b) R_SHRT(FUNCNAME_I4VECAMININDEX(C_DTPI(a,b)))
#define i4vec_aminz(a,b) R_INT(FUNCNAME_I4VECAMINZ(C_DTPI(a,b)))
#define i4vec_aminz_index(a,b) R_SHRT(FUNCNAME_I4VECAMINZINDEX(C_DTPI(a,b)))
#define i4vec_any_lt(a,b,c) R_UCHR(FUNCNAME_I4VECANYLT(C_DT2PI(a,b,c)))
#define i4vec_any_negative(a,b) R_UCHR(FUNCNAME_I4VECANYNEGATIVE(C_DTPI(a,b)))
#define i4vec_any_nonzero(a,b) R_UCHR(FUNCNAME_I4VECANYNONZERO(C_DTPI(a,b)))
#define i4vec_ascend_sub(a,b,c) FUNCNAME_I4VECASCENDSUB(C_DTPIPDT(a,b,c))
#define i4vec_ascends(a,b) R_UCHR(FUNCNAME_I4VECASCENDS(C_DTPI(a,b)))
#define i4vec_axpy(a,b,c,d,e,f) FUNCNAME_I4VECAXPY(C_DTIPIIPII(a,b,c,d,e,f))
#define i4vec_bracket(a,b,c,d,e) FUNCNAME_I4VECBRACKET(C_DTPII2PS(a,b,c,d,e))
#define i4vec_compare(a,b,c) R_SHRT(FUNCNAME_I4VECCOMPARE(C_DT2PI(a,b,c)))
#define i4vec_concatenate(a,b,c,d,e) FUNCNAME_I4VECCONCATENATE(C_2DT3PI(a,c,b,d,e))
#define i4vec_concatenate_new(a,b,c,d) FUNCNAME_I4VECCONCATENATENEW(C_2DT2PI(a,c,b,d))
#define i4vec_copy(a,b,c) FUNCNAME_I4VECCOPY(C_DT2PI(a,b,c))
#define i4vec_copy_new(a,b) FUNCNAME_I4VECCOPYNEW(C_DTPI(a,b))
#define i4vec_cum_new(a,b) FUNCNAME_I4VECCUMNEW(C_DTPI(a,b))
#define i4vec_cum0_new(a,b) FUNCNAME_I4VECCUM0NEW(C_DTPI(a,b))
#define i4vec_decrement(a,b) FUNCNAME_I4VECDECREMENT(C_DTPI(a,b))
#define i4vec_descends(a,b) R_UCHR(FUNCNAME_I4VECDESCENDS(C_DTPI(a,b)))
#define i4vec_direct_product(a,b,c,d,e,f) FUNCNAME_I4VECDIRECTPRODUCT(C_2DTPI2DTPI(a,b,c,d,e,f))
#define i4vec_direct_product2(a,b,c,d,e,f) FUNCNAME_I4VECDIRECTPRODUCT2(C_2DTPI2DTPI(a,b,c,d,e,f))
#define i4vec_dot_product(a,b,c) R_INT(FUNCNAME_I4VECDOTPRODUCT(C_DT2PI(a,b,c)))
#define i4vec_eq(a,b,c) R_UCHR(FUNCNAME_I4VECEQ(C_DT2PI(a,b,c)))
#define i4vec_even_all(a,b) R_UCHR(FUNCNAME_I4VECEVENALL(C_DTPI(a,b)))
#define i4vec_even_any(a,b) R_UCHR(FUNCNAME_I4VECEVENANY(C_DTPI(a,b)))
#define i4vec_find(a,b,c) R_SHRT(FUNCNAME_I4VECFIND(C_DTPII(a,b,c)))
#define i4vec_first_index(a,b) FUNCNAME_I4VECFIRSTINDEX(C_DTPI(a,b))
#define i4vec_frac(a,b,c) R_INT(FUNCNAME_I4VECFRAC(C_2DTPI(a,c,b)))
#define i4vec_gcd(a,b) R_INT(FUNCNAME_I4VECGCD(C_DTPI(a,b)))
#define i4vec_heap_a(a,b) FUNCNAME_I4VECHEAPA(C_DTPI(a,b))
#define i4vec_heap_d(a,b) FUNCNAME_I4VECHEAPD(C_DTPI(a,b))
#define i4vec_heap_d_extract(a,b) R_INT(FUNCNAME_I4VECHEAPDEXTRACT(C_DTPI(a,b)))
#define i4vec_heap_d_insert(a,b,c) FUNCNAME_I4VECHEAPDINSERT(C_PDTPII(a,b,c))
#define i4vec_heap_d_max(a,b) R_INT(FUNCNAME_I4VECHEAPDMAX(C_DTPI(a,b)))
#define i4vec_histogram(a,b,c) FUNCNAME_I4VECHISTOGRAM(C_DTPII(a,b,c))
#define i4vec_histogram_masked(a,b,c,d) FUNCNAME_I4VECHISTOGRAMMASKED(C_DTI2PI(a,c,b,d))
#define i4vec_increment(a,b) FUNCNAME_I4VECINCREMENT(C_DTPI(a,b))
#define i4vec_index(a,b,c) R_SHRT(FUNCNAME_I4VECINDEX(C_DTPII(a,b,c)))
#define i4vec_index_delete_all(a,b,c,d,e,f,g) FUNCNAME_I4VECINDEXDELETEALL(C_DT2PII3PI(a,b,c,d,e,f,g))
#define i4vec_index_delete_dupes(a,b,c,d,e,f) FUNCNAME_I4VECINDEXDELETEDUPES(C_DTPIPDT2PIPS(a,b,c,d,e,f))
#define i4vec_index_delete_one(a,b,c,d,e,f,g) FUNCNAME_I4VECINDEXDELETEONE(C_DT2PII3PI(a,b,c,d,e,f,g))
#define i4vec_index_insert(a,b,c,d) FUNCNAME_I4VECINDEXINSERT(C_3PII(a,b,c,d))
#define i4vec_index_insert_unique(a,b,c,d) FUNCNAME_I4VECINDEXINSERTUNIQUE(C_3PII(a,b,c,d))
#define i4vec_index_order(a,b,c) FUNCNAME_I4VECINDEXORDER(C_DTPIPDT(a,b,c))
#define i4vec_index_search(a,b,c,d,e,f,g) FUNCNAME_I4VECINDEXSEARCH(C_DT2PII3PI(a,b,c,d,e,f,g))
#define i4vec_index_sort_unique(a,b,c,d,e) FUNCNAME_I4VECINDEXSORTUNIQUE(C_DT4PI(a,b,c,d,e))
#define i4vec_indexed_heap_d(a,b,c) FUNCNAME_I4VECINDEXEDHEAPD(C_DTPIPDT(a,b,c))
#define i4vec_indexed_heap_d_extract(a,b,c) R_INT(FUNCNAME_I4VECINDEXEDHEAPDEXTRACT(C_2PIPDT(a,b,c)))
#define i4vec_indexed_heap_d_insert(a,b,c,d) FUNCNAME_I4VECINDEXEDHEAPDINSERT(C_DTPIPDTPI(d,a,c,b))
#define i4vec_indexed_heap_d_max(a,b,c) R_INT(FUNCNAME_I4VECINDEXEDHEAPDMAX(C_2PIPDT(a,b,c)))
#define i4vec_indicator0(a,b) FUNCNAME_I4VECINDICATOR0(C_DTPI(a,b))
#define i4vec_indicator0_new(a) FUNCNAME_I4VECINDICATOR0NEW(C_SUSHRT(a))
#define i4vec_indicator1(a,b) FUNCNAME_I4VECINDICATOR1(C_DTPI(a,b))
#define i4vec_indicator1_new(a) FUNCNAME_I4VECINDICATOR1NEW(C_SUSHRT(a))
#define i4vec_insert(a,b,c,d) FUNCNAME_I4VECINSERT(C_DTPI2I(a,b,c,d))
#define i4vec_lcm(a,b) R_INT(FUNCNAME_I4VECLCM(C_DTPI(a,b)))
#define i4vec_max(a,b) R_INT(FUNCNAME_I4VECMAX(C_DTPI(a,b)))
#define i4vec_max_index(a,b) R_SHRT(FUNCNAME_I4VECMAXINDEX(C_DTPI(a,b)))
#define i4vec_max_index_last(a,b) R_SHRT(FUNCNAME_I4VECMAXINDEXLAST(C_DTPI(a,b)))
#define i4vec_mean(a,b) R_DBL(FUNCNAME_I4VECMEAN(C_DTPI(a,b)))
#define i4vec_median(a,b) R_INT(FUNCNAME_I4VECMEDIAN(C_DTPI(a,b)))
#define i4vec_merge_a(a,b,c,d) FUNCNAME_I4VECMERGEA(C_2DT2PI(a,c,b,d))
#define i4vec_min(a,b) R_INT(FUNCNAME_I4VECMIN(C_DTPI(a,b)))
#define i4vec_min_index(a,b) R_SHRT(FUNCNAME_I4VECMININDEX(C_DTPI(a,b)))
#define i4vec_min_mv(a,b,c,d,e) FUNCNAME_I4VECMINMV(C_2DT3PI(a,b,c,d,e))
#define i4vec_negone(a,b) FUNCNAME_I4VECNEGONE(C_DTPI(a,b))
#define i4vec_negone_new(a) FUNCNAME_I4VECNEGONENEW(C_SUSHRT(a))
#define i4vec_nonzero_count(a,b) R_USHRT(FUNCNAME_I4VECNONZEROCOUNT(C_DTPI(a,b)))
#define i4vec_nonzero_first(a,b,c,d) FUNCNAME_I4VECNONZEROFIRST(C_DTPIPDTPI(a,b,d,c))
#define i4vec_norm_l0(a,b) R_USHRT(FUNCNAME_I4VECNORML0(C_DTPI(a,b)))
#define i4vec_odd_all(a,b) R_UCHR(FUNCNAME_I4VECODDALL(C_DTPI(a,b)))
#define i4vec_odd_any(a,b) R_UCHR(FUNCNAME_I4VECODDANY(C_DTPI(a,b)))
#define i4vec_one_new(a) FUNCNAME_I4VECONENEW(C_SUSHRT(a))
#define i4vec_order_type(a,b) R_INT(FUNCNAME_I4VECORDERTYPE(C_DTPI(a,b)))
#define i4vec_pairwise_prime(a,b) R_UCHR(FUNCNAME_I4VECPAIRWISEPRIME(C_DTPI(a,b)))
#define i4vec_part(a,b,c) FUNCNAME_I4VECPART(C_DTPII(a,c,b))
#define i4vec_part_quick_a(a,b,c,d) FUNCNAME_I4VECPARTQUICKA(C_DT3PI(a,b,c,d))
#define i4vec_permute(a,b,c) FUNCNAME_I4VECPERMUTE(C_DT2PI(a,b,c))
#define i4vec_permute_uniform(a,b,c) FUNCNAME_I4VECPERMUTEUNIFORM(C_DT2PI(a,b,c))
#define i4vec_red(a,b) R_INT(FUNCNAME_I4VECRED(C_DTPI(a,b)))
#define i4vec_reverse(a,b) FUNCNAME_I4VECREVERSE(C_DTPI(a,b))
#define i4vec_rotate(a,b,c) FUNCNAME_I4VECROTATE(C_2DTPI(a,b,c))
#define i4vec_run_count(a,b) R_INT(FUNCNAME_I4VECRUNCOUNT(C_DTPI(a,b)))
#define i4vec_sort_bubble_a(a,b) FUNCNAME_I4VECSORTBUBBLEA(C_DTPI(a,b))
#define i4vec_sort_bubble_d(a,b) FUNCNAME_I4VECSORTBUBBLED(C_DTPI(a,b))
#define i4vec_sort_heap_a(a,b) FUNCNAME_I4VECSORTHEAPA(C_DTPI(a,b))
#define i4vec_sort_heap_d(a,b) FUNCNAME_I4VECSORTHEAPD(C_DTPI(a,b))
#define i4vec_sort_heap_index_a(a,b) FUNCNAME_I4VECSORTHEAPINDEXA(C_DTPI(a,b))
#define i4vec_sort_heap_index_d(a,b) FUNCNAME_I4VECSORTHEAPINDEXD(C_DTPI(a,b))
#define i4vec_sort_quick_a(a,b) FUNCNAME_I4VECSORTQUICKA(C_DTPI(a,b))
#define i4vec_sort_shell_a(a,b) FUNCNAME_I4VECSORTSHELLA(C_DTPI(a,b))
#define i4vec_sorted_undex(a,b,c,d,e) FUNCNAME_I4VECSORTEDUNDEX(C_2DT3PI(a,c,b,d,e))
#define i4vec_sorted_unique(a,b) R_USHRT(FUNCNAME_I4VECSORTEDUNIQUE(C_DTPI(a,b)))
#define i4vec_sorted_unique_count(a,b) R_USHRT(FUNCNAME_I4VECSORTEDUNIQUECOUNT(C_DTPI(a,b)))
#define i4vec_sorted_unique_hist(a,b,c,d,e,f) FUNCNAME_I4VECSORTEDUNIQUEHIST(C_DTPIDTPDT2PI(a,b,c,d,e,f))
#define i4vec_split(a,b,c) R_INT(FUNCNAME_I4VECSPLIT(C_DTPII(a,b,c)))
#define i4vec_std(a,b) R_DBL(FUNCNAME_I4VECSTD(C_DTPI(a,b)))
#define i4vec_swap(a,b,c) FUNCNAME_I4VECSWAP(C_DT2PI(a,b,c))
#define i4vec_undex(a,b,c,d,e) FUNCNAME_I4VECUNDEX(C_2DT3PI(a,c,b,d,e))
#define i4vec_unique_count(a,b) R_USHRT(FUNCNAME_I4VECUNIQUECOUNT(C_DTPI(a,b)))
#define i4vec_unique_index(a,b) R_USHRT(FUNCNAME_I4VECUNIQUEINDEX(C_DTPI(a,b)))
#define i4vec_value_index(a,b,c,d,e) FUNCNAME_I4VECVALUEINDEX(C_2DTPIIPI(a,d,b,c,e))
#define i4vec_value_num(a,b,c) R_USHRT(FUNCNAME_I4VECVALUENUM(C_DTPII(a,b,c)))
#define i4vec_variance(a,b) R_DBL(FUNCNAME_I4VECVARIANCE(C_DTPI(a,b)))
#define i4vec_width(a,b) R_DBL(FUNCNAME_I4VECWIDTH(C_DTPI(a,b)))
#define i4vec_zeros(a,b) FUNCNAME_I4VECZEROS(C_DTPI(a,b))
#define i4vec_zeros_new(a) FUNCNAME_I4VECZEROSNEW(a)
#define i4vec2_compare(a,b,c,d,e) R_SHRT(FUNCNAME_I4VEC2COMPARE(C_DT2I2PI(a,d,e,b,c)))
#define i4vec2_sort_a(a,b,c) FUNCNAME_I4VEC2SORTA(C_DT2PI(a,b,c))
#define i4vec2_sort_d(a,b,c) FUNCNAME_I4VEC2SORTD(C_DT2PI(a,b,c))
#define i4vec2_sorted_unique(a,b,c,d) FUNCNAME_I4VEC2SORTEDUNIQUE(C_DT3PI(a,b,c,d))
#define i4vec2_sorted_unique_count(a,b,c) R_INT(FUNCNAME_I4VEC2SORTEDUNIQUECOUNT(C_DT2PI(a,b,c)))
#define l4_to_i4(a) R_UCHR(FUNCNAME_L4TOI4(C_SINT(a)))
#define l4_xor(a,b) R_UCHR(FUNCNAME_L4XOR(C_PINT2(a,b)))
#define pascal_to_i4(a,b) R_INT(FUNCNAME_PASCALTOI4(C_PINT2(a,b)))
#define perm_cycle(a,b,c,d,e) FUNCNAME_PERMCYCLE(C_DT3PII(a,b,c,d,e))
#define perm0_check(a,b) R_INT(FUNCNAME_PERM0CHECK(C_DTPI(a,b)))
#define perm0_uniform_new(a,b) FUNCNAME_PERM0UNIFORMNEW(C_DTPI(a,b))
#define perm1_check(a,b) R_INT(FUNCNAME_PERM1CHECK(C_DTPI(a,b)))
#define perm1_uniform_new(a,b) FUNCNAME_PERM1UNIFORMNEW(C_DTPI(a,b))
#define prime(a) R_INT(FUNCNAME_PRIME(C_SUSHRT(a)))
#define sort_heap_external(a,b,c,d,e) FUNCNAME_SORTHEAPEXTERNAL(C_DT3PII(a,b,c,d,e))
#define triangle_to_i4(a,b) R_INT(FUNCNAME_TRIANGLETOI4(C_PUSHRT2(a,b)))
#define i4_to_bvec(a,b,c) FUNCNAME_I4TOBVEC(C_IDTPB(a,b,c))

__MATHSUITE __JBURKARDT void * FUNCNAME_I4LOG2(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4LOG10(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ISPRIME(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4HUGENORMALIZER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4FLOOR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ABS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MACH(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MODDIV(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MANT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4TOHALTON(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4TOPASCAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4TOTRIANGLE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I43MATFLIPCOLS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I43MATFLIPROWS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4BLOCKDELETE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4CMATDELETE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLCOMPARE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLFIND(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLFINDITEM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLFINDPAIRWRAP(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLSORTA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLSORTD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLSORT2A(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLSORT2D(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLSORTEDSINGLETONCOUNT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLSORTEDUNIQUE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLSORTEDUNIQUECOUNT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLSWAP(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4I4SORTA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4I4I4SORTA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATCOPY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATELIM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATFLIPCOLS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATFLIPROWS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MAX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MAXINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MIN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MININDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATMAX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATMAXINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATMIN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATMININDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATPERMUNIFORM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATPERM2UNIFORM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATRED(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATUNIFORMAB(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4RMATDELETE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ROWCOMPARE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ROWFINDITEM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ROWSORTA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ROWSORTD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ROWSORT2D(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ROWSWAP(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECADD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECALLNONPOSITIVE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECAMAX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECAMAXINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECAMIN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECAMININDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECAMINZ(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECAMINZINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECANYLT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECANYNONNEGATIVE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECANYNEGATIVE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECANYNONZERO(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECASCENDS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECAXPY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECBRACKET(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECCOMPARE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECCONCATENATE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECCOPY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECDECREMENT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECDESCENDS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECDIRECTPRODUCT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECDIRECTPRODUCT2(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECDOTPRODUCT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECEQ(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECEVENALL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECEVENANY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECFIND(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECFRAC(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECGCD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECHEAPA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECHEAPD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECHEAPDEXTRACT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECHEAPDINSERT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECHEAPDMAX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINCREMENT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXDELETEALL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXDELETEDUPES(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXDELETEONE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXINSERT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXINSERTUNIQUE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECORDER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXORDER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXSEARCH(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXSORTUNIQUE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXEDHEAPD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXEDHEAPDEXTRACT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXEDHEAPDINSERT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDEXEDHEAPDMAX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDICATOR0(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDICATOR1(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINSERT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECLCM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECMAX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECMAXINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECMAXINDEXLAST(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECMEAN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECMEDIAN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECMIN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECMININDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECMINMV(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECNEGONE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECNONZEROCOUNT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECNONZEROFIRST(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECNORML0(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECODDALL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECODDANY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECORDERTYPE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECPAIRWISEPRIME(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECPART(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECPARTQUICKA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECPERMUTE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECPERMUTEUNIFORM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECRED(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECREVERSE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECROTATE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECRUNCOUNT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTBUBBLEA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTBUBBLED(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTHEAPA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTHEAPD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTQUICKA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTSHELLA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTEDUNDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTEDUNIQUE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTEDUNIQUECOUNT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTEDUNIQUEHIST(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSPLIT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSTD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSWAP(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECUNDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECUNIQUECOUNT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECVALUENUM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECVARIANCE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECWIDTH(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECZEROS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VEC2COMPARE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VEC2SORTA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VEC2SORTD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VEC2SORTEDUNIQUE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VEC2SORTEDUNIQUECOUNT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PERMCYCLE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PERM0CHECK(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PERM1CHECK(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_SORTHEAPEXTERNAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4TOBVEC(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4TODIGITSBINARY(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4TODIGITSDECIMAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4TOFAC(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4BLOCKNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4BLOCKZEROSNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4CMATNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLFIRSTINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4COLUNIQUEINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATBORDERADD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATBORDERCUT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATCOPYNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATHISTOGRAM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATINDICATORNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATL1INVERSE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATMM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATU1INVERSE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MATUNIFORMABNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4RMATNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ROWMAX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ROWMEAN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ROWMIN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ROWSUM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ROWVARIANCE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECADDNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECASCENDSUB(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECCONCATENATENEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECCOPYNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECCUMNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECCUM0NEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECFIRSTINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECHISTOGRAM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECHISTOGRAMMASKED(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDICATOR0NEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDICATOR1NEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECMERGEA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECNEGONENEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECONENEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTHEAPINDEXA(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECSORTHEAPINDEXD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECUNIQUEINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECVALUEINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECZEROSNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PERM0UNIFORMNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PERM1UNIFORMNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4BITHI1(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4BITLO0(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4BITLO1(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4CHARACTERISTIC(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ISEVEN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ISODD(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4ISPOWEROF2(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4REVERSEBYTES(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4SIGN3(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4TOANGLE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4TOISBN(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4TOPASCALDEGREE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4WIDTH(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4TOL4(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_L4TOI4(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_L4XOR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PRIME(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4POW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4BITREVERSE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4CHOOSE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4DIVROUNDED(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4DIVISION(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4DIVP(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4FALL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4FRACTION(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4LCM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4LOGI4(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4LOGR8(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4MODINV(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4RISE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4WALSH1D(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4XOR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4GCDB(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4WRAP(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4INTTOR4INT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4INTTOR8INT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4SWAP3(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4UNSWAP3(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PASCALTOI4(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TRIANGLETOI4(void *);

#endif
