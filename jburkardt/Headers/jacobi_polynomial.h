#ifndef WRAPPER_JACOBI_POLYNOMIAL_H_INCLUDED
#define WRAPPER_JACOBI_POLYNOMIAL_H_INCLUDED

#define j_double_product_integral(a,b,c) R_DBL(FUNCNAME_JDOUBLEPRODUCTINTEGRAL(C_PDT2IT(a,b,c)))
#define j_integral(a) R_DBL(FUNCNAME_JINTEGRAL(C_SUSHRT(a)))
#define j_polynomial(a,b,c,d) R_DBL(FUNCNAME_JPOLYNOMIAL(C_DT3IT(a,b,c,d)))
#define j_polynomial_zeros(a,b,c,d) R_UCHR(FUNCNAME_JPOLYNOMIALZEROS(C_DT2ITPIT(a,b,c,d)))
#define j_quadrature_rule(a,b,c,d,e) R_UCHR(FUNCNAME_JQUADRATURERULE(C_DT2IT2PIT(a,b,c,d,e)))

__MATHSUITE __JBURKARDT void * FUNCNAME_JDOUBLEPRODUCTINTEGRAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_JPOLYNOMIALZEROS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_JQUADRATURERULE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_JINTEGRAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_JPOLYNOMIAL(void *);

#endif
