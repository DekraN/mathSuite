#ifndef WRAPPER_UNICYCLE_H_INCLUDED
#define WRAPPER_UNICYCLE_H_INCLUDED

#define i4vec_indicator(a,b) FUNCNAME_I4VECINDICATOR(C_DTPI(a,b))
#define i4vec_indicator_new(a) FUNCNAME_I4VECINDICATORNEW(C_SUSHRT(a))
#define perm_inverse(a,b) FUNCNAME_PERMINVERSE(C_DTPI(a,b))
#define perm_lex_next(a,b,c) FUNCNAME_PERMLEXNEXT(C_DTPIPDT(a,b,c))
#define perm_enum(a) R_INT(FUNCNAME_PERMENUM(C_SINT(a)))
#define unicycle_check(a,b) FUNCNAME_UNICYCLECHECK(C_DTPI(a,b))
#define unicycle_enum(a) R_USHRT(FUNCNAME_UNICYCLEENUM(C_SUSHRT(a)))
#define unicycle_index(a,b) FUNCNAME_UNICYCLEINDEX(C_DTPI(a,b))
#define unicycle_index_to_sequence(a,b) FUNCNAME_UNICYCLEINDEXTOSEQUENCE(C_DTPI(a,b))
#define unicycle_inverse(a,b) FUNCNAME_UNICYCLEINVERSE(C_DTPI(a,b))
#define unicycle_next(a,b,c) FUNCNAME_UNICYCLENEXT(C_DTPIPDT(a,b,c))
#define unicycle_random(a,b) FUNCNAME_UNICYCLERANDOM(C_DTPI(a,b))
#define unicycle_rank(a,b) R_USHRT(FUNCNAME_UNICYCLERANK(C_DTPI(a,b)))
#define unicycle_unrank(a,b) FUNCNAME_UNICYCLEUNRANK(C_PUSHRT2(a,b))

__MATHSUITE __JBURKARDT void * FUNCNAME_PERMLEXNEXT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UNICYCLECHECK(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UNICYCLENEXT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UNICYCLERANK(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDICATOR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECINDICATORNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PERMINVERSE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UNICYCLEINDEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UNICYCLEINDEXTOSEQUENCE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UNICYCLEINVERSE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UNICYCLERANDOM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UNICYCLEUNRANK(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_PERMENUM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UNICYCLEENUM(void *);

#endif
