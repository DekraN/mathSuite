#ifndef WRAPPER_CHEBYSHEV_POLYNOMIAL_H_INCLUDED
#define WRAPPER_CHEBYSHEV_POLYNOMIAL_H_INCLUDED

#define i4_uniform(a,b,c) R_INT(FUNCNAME_I4UNIFORM(C_2IPI(a,b,c)))
#define r8mat_copy_new(a,b,c) FUNCNAME_R8MATCOPYNEW(C_2DTPIT(a,b,c))
#define r8vec_uniform_01_new(a,b) FUNCNAME_R8VECUNIFORM01NEW(C_DTPI(a,b))
#define t_double_product_integral(a,b) R_DBL(FUNCNAME_TDOUBLEPRODUCTINTEGRAL(C_PUSHRT2(a,b)))
#define t_integral(a) R_DBL(FUNCNAME_TINTEGRAL(C_SUSHRT(a)))
#define t_polynomial(a,b) R_DBL(FUNCNAME_TPOLYNOMIAL(C_DTIT(a,b)))
#define t_polynomial_ab(a,b,c,d) R_DBL(FUNCNAME_TPOLYNOMIALAB(C_DT3IT(c,a,b,d)))
#define t_polynomial_coefficients(a,b) R_UCHR(FUNCNAME_TPOLYNOMIALCOEFFICIENTS(C_DTPIT(a,b)))
#define t_polynomial_zeros(a,b) FUNCNAME_TPOLYNOMIALZEROS(C_DTPIT(a,b))
#define t_project_coefficients(a,b,c) FUNCNAME_TPROJECTCOEFFICIENTS(C_DTFITPIT(a,b,c))
#define t_project_coefficients_ab(a,b,c,d,e) FUNCNAME_TPROJECTCOEFFICIENTSAB(C_DTFIT2ITPIT(a,b,c,d,e))
#define t_project_value(a,b,c) R_DBL(FUNCNAME_TPROJECTVALUE(C_DTPITIT(a,c,b)))
#define t_project_value_ab(a,b,c,d,e) R_DBL(FUNCNAME_TPROJECTVALUEAB(C_DT3ITPIT(a,b,d,e,c)))
#define t_quadrature_rule(a,b,c) R_UCHR(FUNCNAME_TQUADRATURERULE(C_DT2PIT(a,b,c)))
#define t_triple_product_integral(a) R_DBL(FUNCNAME_TTRIPLEPRODUCTINTEGRAL(a))
#define u_double_product_integral(a) R_DBL(FUNCNAME_UDOUBLEPRODUCTINTEGRAL(a))
#define u_integral(a) R_DBL(FUNCNAME_UINTEGRAL(C_SUSHRT(a)))
#define u_polynomial(a,b) R_DBL(FUNCNAME_UPOLYNOMIAL(C_DTIT(a,b)))
#define u_polynomial_coefficients(a,b) R_UCHR(FUNCNAME_UPOLYNOMIALCOEFFICIENTS(C_DTPIT(a,b)))
#define u_polynomial_zeros(a,b) FUNCNAME_UPOLYNOMIALZEROS(C_DTPIT(a,b))
#define u_quadrature_rule(a,b,c) R_UCHR(FUNCNAME_UQUADRATURERULE(C_DT2PIT(a,b,c)))
#define v_double_product_integral(a) R_DBL(FUNCNAME_VDOUBLEPRODUCTINTEGRAL(a))
#define v_polynomial(a,b) R_DBL(FUNCNAME_VPOLYNOMIAL(C_DTIT(a,b)))
#define v_polynomial_zeros(a,b) FUNCNAME_VPOLYNOMIALZEROS(C_DTPIT(a,b))
#define w_double_product_integral(a) R_DBL(FUNCNAME_WDOUBLEPRODUCTINTEGRAL(a))
#define w_polynomial(a,b) R_DBL(FUNCNAME_WPOLYNOMIAL(C_DTIT(a,b)))
#define w_polynomial_zeros(a,b) FUNCNAME_WPOLYNOMIALZEROS(C_DTPIT(a,b))

__MATHSUITE __JBURKARDT void * FUNCNAME_I4UNIFORM(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TDOUBLEPRODUCTINTEGRAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TPOLYNOMIALCOEFFICIENTS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TPOLYNOMIALZEROS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TPROJECTVALUE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TPROJECTVALUEAB(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TPROJECTCOEFFICIENTS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TPROJECTCOEFFICIENTSAB(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TQUADRATURERULE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TTRIPLEPRODUCTINTEGRAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UDOUBLEPRODUCTINTEGRAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UPOLYNOMIALCOEFFICIENTS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UPOLYNOMIALZEROS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UQUADRATURERULE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_VDOUBLEPRODUCTINTEGRAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_VPOLYNOMIALZEROS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_WDOUBLEPRODUCTINTEGRAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_WPOLYNOMIALZEROS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_R8MATCOPYNEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_R8VECUNIFORM01NEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TINTEGRAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UINTEGRAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TPOLYNOMIAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_UPOLYNOMIAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_VPOLYNOMIAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_WPOLYNOMIAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_TPOLYNOMIALAB(void *);

#endif
