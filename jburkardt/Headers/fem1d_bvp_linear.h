#ifndef WRAPPER_FEM1D_BVP_LINEAR_H_INCLUDED
#define WRAPPER_FEM1D_BVP_LINEAR_H_INCLUDED

#define i4vec_zero_new(a) FUNCNAME_I4VECZERONEW(C_SUSHRT(a))
#define fem1d_bvp_linear(a,b,c,d,e) FUNCNAME_FEM1DBVPLINEAR(C_DT3FITPIT(a,b,c,d,e))
#define h1s_error_linear(a,b,c,d) R_DBL(FUNCNAME_H1SERRORLINEAR(C_DT2PITFIT(a,b,c,d)))
#define l1_error(a,b,c,d) R_DBL(FUNCNAME_L1ERROR(C_DT2PITFIT(a,b,c,d)))
#define l2_error_linear(a,b,c,d) R_DBL(FUNCNAME_L2ERRORLINEAR(C_DT2PITFIT(a,b,c,d)))
#define max_error_linear(a,b,c,d) R_DBL(FUNCNAME_MAXERRORLINEAR(C_DT2PITFIT(a,b,c,d)))
#define r8mat_solve2(a,b,c,d) FUNCNAME_R8MATSOLVE2(C_DT2PITPDT(a,b,c,d))
#define r8vec_zero_new(a) FUNCNAME_R8VECZERONEW(C_SUSHRT(a))

__MATHSUITE __JBURKARDT void * FUNCNAME_I4VECZERONEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_R8MATSOLVE2(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_R8VECZERONEW(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_FD1DBVPLINEAR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_FEM1DBVPLINEAR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_H1SERRORLINEAR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_L1ERROR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_L2ERRORLINEAR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_MAXERRORLINEAR(void *);

#endif
