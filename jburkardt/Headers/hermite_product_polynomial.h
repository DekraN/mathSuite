#ifndef WRAPPER_HERMITE_PRODUCT_POLYNOMIAL_H_INCLUDED
#define WRAPPER_HERMITE_PRODUCT_POLYNOMIAL_H_INCLUDED

#define comp_next_grlex(a,b) FUNCNAME_COMPNEXTGRLEX(C_DTPDT(a,b))
#define comp_random_grlex(a,b,c,d,e) FUNCNAME_COMPRANDOMGRLEX(C_3DTPIPDT(a,b,c,d,e))
#define comp_rank_grlex(a,b) R_USHRT(FUNCNAME_COMPRANKGRLEX(C_DTPDT(a,b)))
#define comp_unrank_grlex(a,b) FUNCNAME_COMPUNRANKGRLEX(C_PUSHRT2(a,b))
#define hep_coefficients(a,b,c,d) FUNCNAME_HEPCOEFFICIENTS(C_DTPIT2PDT(a,c,b,d))
#define hep_value(a,b,c) FUNCNAME_HEPVALUE(C_2DTPIT(a,b,c))
#define hepp_to_polynomial(a,b,c,d,e,f) FUNCNAME_HEPPTOPOLYNOMIAL(C_2DTPI2PDTPIT(a,c,f,b,d,e))
#define hepp_value(a,b,c,d) FUNCNAME_HEPPVALUE(C_PIT2DTPDT(d,a,b,c))
#define i4_uniform_ab(a,b,c) R_INT(FUNCNAME_I4UNIFORMAB(C_2IPI(a,b,c)))
#define polynomial_compress(a,b,c,d,e,f) FUNCNAME_POLYNOMIALCOMPRESS(C_DTPITPIPDTPITPI(a,b,c,d,e,f))
#define polynomial_sort(a,b,c) FUNCNAME_POLYNOMIALSORT(C_DTPITPI(a,b,c))
#define polynomial_value(a,b,c,d,e,f) FUNCNAME_POLYNOMIALVALUE(C_PIT2DTPITPDTDT(c,a,b,f,d,e))

__MATHSUITE __JBURKARDT void * FUNCNAME_COMPRANKGRLEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_HEPCOEFFICIENTS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_HEPPTOPOLYNOMIAL(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_I4UNIFORMAB(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_POLYNOMIALCOMPRESS(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_POLYNOMIALSORT(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_COMPNEXTGRLEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_COMPRANDOMGRLEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_COMPUNRANKGRLEX(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_HEPVALUE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_HEPPVALUE(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_POLYNOMIALVALUE(void *);

#endif
