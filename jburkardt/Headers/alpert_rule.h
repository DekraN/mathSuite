#ifndef WRAPPER_ALPERT_RULE_H_INCLUDED
#define WRAPPER_ALPERT_RULE_H_INCLUDED

#define a_log(a) R_USHRT(FUNCNAME_ALOG(C_SUSHRT(a)))
#define a_power(a) R_USHRT(FUNCNAME_APOWER(C_SUSHRT(a)))
#define a_regular(a) R_USHRT(FUNCNAME_AREGULAR(C_SUSHRT(a)))
#define j_log(a) R_USHRT(FUNCNAME_JLOG(C_SUSHRT(a)))
#define j_power(a) R_USHRT(FUNCNAME_JPOWER(C_SUSHRT(a)))
#define j_regular(a) R_USHRT(FUNCNAME_JREGULAR(C_SUSHRT(a)))
#define num_log() R_USHRT(FUNCNAME_NUMLOG(NULL))
#define num_power() R_USHRT(FUNCNAME_NUMPOWER(NULL))
#define num_regular() R_USHRT(FUNCNAME_NUMREGULAR(NULL))
#define order_log(a) R_USHRT(FUNCNAME_ORDERLOG(C_SUSHRT(a)))
#define order_power(a) R_DBL(FUNCNAME_ORDERPOWER(C_SUSHRT(a)))
#define order_regular(a) R_USHRT(FUNCNAME_ORDERREGULAR(C_SUSHRT(a)))
#define rule_log(a,b,c,d) FUNCNAME_RULELOG(C_2DT2PIT(a,b,c,d))
#define rule_power(a,b,c,d) FUNCNAME_RULEPOWER(C_2DT2PIT(a,b,c,d))
#define rule_regular(a,b,c,d) FUNCNAME_RULEREGULAR(C_2DT2PIT(a,b,c,d))

__MATHSUITE __JBURKARDT void * FUNCNAME_RULELOG(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_RULEPOWER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_RULEREGULAR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_ALOG(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_APOWER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_AREGULAR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_JLOG(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_JPOWER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_JREGULAR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_NUMLOG(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_NUMPOWER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_NUMREGULAR(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_ORDERLOG(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_ORDERPOWER(void *);
__MATHSUITE __JBURKARDT void * FUNCNAME_ORDERREGULAR(void *);

#endif
