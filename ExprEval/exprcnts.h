#ifndef WRAPPER_EXPRCNTS_H_INCLUDED
#define WRAPPER_EXPRCNTS_H_INCLUDED

__MATHSUITE  void * FUNCNAME_EFLOAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EBOOL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EUSHORT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_ESHORT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EINT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_ENEW(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FLOAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BOOL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_USHORT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SHORT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_INT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_NEW(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EVFLOAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EVBOOL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EVUSHORT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EVSHORT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EVINT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EVNEW(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_VFLOAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_VBOOL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_VUSHORT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_VSHORT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_VINT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_VNEW(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_VOLATILE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SETARRAYSINDEX(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FSET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BSET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_USET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SSET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_ISET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FGET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BGET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_UGET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SGET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_IGET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_GET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_DEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_DELALL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FPRINT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BPRINT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_UPRINT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SPRINT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_IPRINT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_PRINT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FPMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BPMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_UPMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SPMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_IPMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_PMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_VTYPE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FMATPRM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BMATPRM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_UMATPRM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SMATPRM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_IMATPRM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MATPRM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FPRMMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BPRMMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_UPRMMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SPRMMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_IPRMMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_PRMMAT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);

#endif
