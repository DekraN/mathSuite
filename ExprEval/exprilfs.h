#ifndef WRAPPER_EXPRILFS_H_INCLUDED
#define WRAPPER_EXPRILFS_H_INCLUDED

__MATHSUITE  void * FUNCNAME_ATLTUAE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EXIT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MSS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_ABS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MOD(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_IPART(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FPART(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MIN(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MAX(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BITCOUNTER(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MGET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MLET(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MDEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MOFF(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SOL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_VERSION(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EXITCHAR(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_PREC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_STABFACT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BLOCKSIZE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MINOSMMDIM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MINSTRASSENDIM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MINSRNUMBER(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_ALGEBRA(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_OUTLIERCONST(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_RSEED(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MMIFIBO(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MMIEVENDFACT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MMIODDDFACT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BINSUM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BINSUB(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_COMPLEMENT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_POW(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SQRT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CBRT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_ROOT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_HARRIS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_HARRIS2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_THARRIS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_THARRIS2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_R8NORMAL01VALUES(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_TEST(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LOG(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LOG2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_POW10(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LN(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EXP(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EXPC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EXP10(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EXP10C(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EXP2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EXP2C(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LOGN(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LOGC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LNC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LOG2C(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LOG1P(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LOG1PC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LOG101P(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LOG101PC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LOG21P(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LOG21PC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFREXPM1(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFREINT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRLI2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRGAMMA(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRLNGAMMA(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRDIGAMMA(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRZETA(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRERF(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRERFC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRJ0(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRJ1(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRJN(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRY0(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRY1(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRYN(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRFMA(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRFMS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRAGM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRHYPOT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MPFRAI(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CELFAH(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FAHCEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CELKEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_KELCEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CELRANK(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_RANKCEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CELREA(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_REACEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CELNEW(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_NEWCEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CELDEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_DELCEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CELROM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_ROMCEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FAHKEL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_KELFAH(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FAHRANK(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_RANKFAH(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FAHREA(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_REAFAH(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_REARANK(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_RANKREA(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CEXP(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CEXPC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CEXP10(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CEXP10C(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CEXP2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CEXP2C(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CPOW(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CROOT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CSQRT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CCBRT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLOGN(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLN(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLNC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLOG(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLOGC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLOG2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLOG2C(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLOG1P(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLOG1PC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLOG101P(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLOG101PC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLOG21P(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLOG21PC(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CARG(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CABS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_QABS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_OABS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SABS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CEIL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FLOOR(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SECONDGRADEQSOLVER(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_COMPLEXADD(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_COMPLEXMUL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_QUATERNIONSADD(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_QUATERNIONSMUL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_RAND(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_RANDOM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_RANDOMIZE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_DEG(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_RAD(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_RECTTOPOLR(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_RECTTOPOLA(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_POLTORECTX(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_POLTORECTY(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BASECHANGE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_NPRIMENUMBER(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_PRIMORIAL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FIRSTNPRIMENUMBERSSUM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FIBONACCIAL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_LCM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_GCD(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_GEOMETRICSUM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FACTORIAL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_DOUBLEFACTORIAL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_STIRLING(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FIBONACCI(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_PERMUTATIONS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_PERMUTATIONSREP(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_KPERMUTATIONS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_KPERMUTATIONSREP(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_COMBINATIONS(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_COMBINATIONSREP(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_ARMONICSUM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_GENARMONICSUM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FIBONACCISUM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FACTORIALSUM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_DOUBLEFACTORIALSUM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FIRSTNNUMBERSSUM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SUM(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_PRODUCT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MODE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_VARIANCE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_VARIANCE2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_COVARIANCE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_COVARIANCE2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_STDDEV(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_STDDEV2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_STDCOD(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_STDCOD2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_PEARSON(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_PEARSON2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_OUTLIER(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_OUTLIER2(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MAP(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_GEOMEAN(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_ARMEAN(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_POWMEAN(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CENTRALVALUE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FIRSTQUARTILE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MEDIAN(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_THIRDQUARTILE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_IF(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_SELECT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_EQUAL(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_ABOVE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_BELOW(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_AVG(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLIP(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_CLAMP(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_PNTCHANGE(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_POLY(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_AND(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_OR(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_NOT(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_FOR(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);
__MATHSUITE  void * FUNCNAME_MANY(EXPRTYPE val, exprObj *obj, exprNode *nodes, EXPRERRTYPE *err, EXPRTYPE args[]);

#endif
